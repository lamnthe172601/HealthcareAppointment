// <auto-generated />
using System;
using HealthcareAppointment.Models.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthcareAppointment.Models.Migrations
{
    [DbContext(typeof(HealthcareAppointmentContext))]
    partial class HealthcareAppointmentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthcareAppointment.Models.Models.Appointment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .IsFixedLength();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("DoctorId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .IsFixedLength();

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .IsFixedLength();

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Date = new DateTime(2024, 10, 16, 11, 7, 48, 960, DateTimeKind.Local).AddTicks(9380),
                            DoctorId = "1",
                            PatientId = "3",
                            Status = 0
                        },
                        new
                        {
                            Id = "2",
                            Date = new DateTime(2024, 10, 17, 11, 7, 48, 960, DateTimeKind.Local).AddTicks(9395),
                            DoctorId = "2",
                            PatientId = "4",
                            Status = 0
                        },
                        new
                        {
                            Id = "3",
                            Date = new DateTime(2024, 10, 18, 11, 7, 48, 960, DateTimeKind.Local).AddTicks(9397),
                            DoctorId = "1",
                            PatientId = "5",
                            Status = 0
                        },
                        new
                        {
                            Id = "4",
                            Date = new DateTime(2024, 10, 19, 11, 7, 48, 960, DateTimeKind.Local).AddTicks(9398),
                            DoctorId = "2",
                            PatientId = "3",
                            Status = 0
                        },
                        new
                        {
                            Id = "5",
                            Date = new DateTime(2024, 10, 20, 11, 7, 48, 960, DateTimeKind.Local).AddTicks(9400),
                            DoctorId = "1",
                            PatientId = "4",
                            Status = 0
                        });
                });

            modelBuilder.Entity("HealthcareAppointment.Models.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("char(36)")
                        .IsFixedLength();

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            Name = "Dr. John Doe",
                            Password = "password123",
                            Role = 0,
                            Specialization = "Cardiology"
                        },
                        new
                        {
                            Id = "2",
                            DateOfBirth = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            Name = "Dr. Jane Smith",
                            Password = "password456",
                            Role = 0,
                            Specialization = "Pediatrics"
                        },
                        new
                        {
                            Id = "3",
                            DateOfBirth = new DateTime(1990, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice.johnson@example.com",
                            Name = "Alice Johnson",
                            Password = "password789",
                            Role = 1,
                            Specialization = "Patient"
                        },
                        new
                        {
                            Id = "4",
                            DateOfBirth = new DateTime(1975, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob.williams@example.com",
                            Name = "Bob Williams",
                            Password = "passwordabc",
                            Role = 1,
                            Specialization = "Patient"
                        },
                        new
                        {
                            Id = "5",
                            DateOfBirth = new DateTime(1995, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emma.brown@example.com",
                            Name = "Emma Brown",
                            Password = "passworddef",
                            Role = 1,
                            Specialization = "Patient"
                        });
                });

            modelBuilder.Entity("HealthcareAppointment.Models.Models.Appointment", b =>
                {
                    b.HasOne("HealthcareAppointment.Models.Models.User", "Doctor")
                        .WithMany("AppointmentDoctors")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_User1");

                    b.HasOne("HealthcareAppointment.Models.Models.User", "Patient")
                        .WithMany("AppointmentPatients")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_User");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthcareAppointment.Models.Models.User", b =>
                {
                    b.Navigation("AppointmentDoctors");

                    b.Navigation("AppointmentPatients");
                });
#pragma warning restore 612, 618
        }
    }
}
